<?php

namespace AppBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;

/**
 * Users
 *
 * @ORM\Table(name="users", uniqueConstraints={@ORM\UniqueConstraint(name="users_login_key", columns={"login"})})
 * @ORM\Entity
 */

class User implements UserInterface {
	/**
	 * @var string
	 *
	 * @ORM\Column(name="login", type="string", length=16, nullable=false)
	 */
	private $login;

	/**
	 * @var string
	 *
	 * @ORM\Column(name="pass", type="string", length=64, nullable=false)
	 */
	private $pass;

	/**
	 * @var \DateTime
	 *
	 * @ORM\Column(name="reg_date", type="datetime", nullable=false)
	 */
	private $regDate = 'now()';

	/**
	 * @var integer
	 *
	 * @ORM\Column(name="id", type="bigint")
	 * @ORM\Id
	 * @ORM\GeneratedValue(strategy="SEQUENCE")
	 * @ORM\SequenceGenerator(sequenceName="users_id_seq", allocationSize=1, initialValue=1)
	 */
	private $id;

	function __construct() {
		$this->regDate = new \DateTime();
	}

	/**
	 * @return string
	 */
	public function getLogin() {
		return $this->login;
	}

	/**
	 * @param string $login
	 *
	 * @return self
	 */
	public function setLogin($login) {
		$this->login = $login;

		return $this;
	}

	/**
	 * @return string
	 */
	public function getPass() {
		return $this->pass;
	}

	/**
	 * @param string $pass
	 *
	 * @return self
	 */
	public function setPass($pass) {
		$this->pass = $pass;

		return $this;
	}

	/**
	 * @return \DateTime
	 */
	public function getRegDate() {
		return $this->regDate;
	}

	/**
	 * @param \DateTime $regDate
	 *
	 * @return self
	 */
	public function setRegDate(\DateTime $regDate) {
		$this->regDate = $regDate;

		return $this;
	}

	/**
	 * @return integer
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param integer $id
	 *
	 * @return self
	 */
	public function setId($id) {
		$this->id = $id;

		return $this;
	}

	public function getRoles() {
		return ['ROLE_USER'];
	}

	public function getPassword() {
		return $this->getPass();
	}

	public function getSalt() {

	}

	public function getUsername() {
		return $this->getLogin();
	}

	public function eraseCredentials() {

	}
}
